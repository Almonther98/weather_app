{"file":"useWeather.mjs","mappings":";AA4CS,MAAM,aAAa,MAAM;AAC9B,QAAM,SAAS,iBAAiB;AAEhC,QAAM,eAAe,OAAO,UAAkB,WAAoB,SAAuC;AACnG,QAAA;AAGI,YAAA,UAAU,OAAO,OAAO,iBAAiB;AAC/C,YAAM,MAAM,kDAAkD,OAAO,MAAM,QAAQ,IAAI,SAAS;AAE1F,YAAA,WAAW,MAAM,MAAM,GAAG;AAE5B,UAAA,CAAC,SAAS,IAAI;AACV,cAAA,IAAI,MAAM,0BAA0B;AAAA,MAAA;AAGtC,YAAA,OAAO,MAAM,SAAS,KAAK;AACjC,cAAQ,IAAI,IAAI;AAGT,aAAA;AAAA,QACL,SAAS;AAAA,UACP,MAAM,KAAK,QAAQ;AAAA;AAAA,UACnB,WAAW,KAAK,QAAQ,UAAU;AAAA,UAClC,0BAAU,KAAK;AAAA,UACf,UAAU,KAAK,QAAQ;AAAA,UACvB,MAAM,KAAK,QAAQ;AAAA,UACnB,eAAe,KAAK,QAAQ;AAAA,UAC5B,UAAU,KAAK,QAAQ;AAAA,QACzB;AAAA,QACA,UAAU;AAAA,UACR,MAAM,KAAK,SAAS;AAAA,UACpB,QAAQ,KAAK,SAAS;AAAA,UACtB,SAAS,KAAK,SAAS;AAAA,QAAA;AAAA,MAE3B;AAAA,aACO,OAAO;AACN,cAAA,MAAM,2BAA2B,KAAK;AACxC,YAAA,IAAI,MAAM,8BAA8B;AAAA,IAAA;AAAA,EAElD;AAEO,SAAA;AAAA,IACL;AAAA,EACF;AACF;","names":[],"sources":["../../../../composables/useWeather.ts"],"sourcesContent":["interface WeatherData {\r\n    current: {\r\n      temp: number;\r\n      condition: string;\r\n      date: Date;\r\n      humidity: number;\r\n      wind: number;\r\n      precipitation: number;\r\n      pressure: number;\r\n    },\r\n    location: {\r\n      name: string;\r\n      region: string;\r\n      country: string;\r\n    }\r\n  }\r\n  \r\n  interface WeatherAPIResponse {\r\n    current: {\r\n      temp_c: number;\r\n      temp_f: number;\r\n      condition: {\r\n        text: string;\r\n        icon: string;\r\n        code: number;\r\n      };\r\n      humidity: number;\r\n      wind_mph: number;\r\n      wind_kph: number;\r\n      precip_mm: number;\r\n      precip_in: number;\r\n      pressure_mb: number;\r\n      pressure_in: number;\r\n      last_updated: string;\r\n    };\r\n    location: {\r\n      name: string;\r\n      region: string;\r\n      country: string;\r\n      lat: number;\r\n      lon: number;\r\n    };\r\n  }\r\n  \r\n  export const useWeather = () => {\r\n    const config = useRuntimeConfig();\r\n    \r\n    const fetchWeather = async (latitude: number, longitude: number , city: string): Promise<WeatherData> => {\r\n      try {\r\n        // For this example, we'll use OpenWeatherMap API\r\n        // You'll need to set up API_KEY in your .env file\r\n        const API_KEY = config.public.weatherApiKey || '3d9d6b00173f4017a5f152806252904';\r\n        const url = `https://api.weatherapi.com/v1/current.json?key=${API_KEY}&q=${latitude},${longitude}`;\r\n        \r\n        const response = await fetch(url);\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('Weather data unavailable');\r\n        }\r\n        \r\n        const data = await response.json() as WeatherAPIResponse;\r\n        console.log(data);\r\n        \r\n        // Transform the API response to our app's format\r\n        return {\r\n          current: {\r\n            temp: data.current.temp_c, // Using Fahrenheit as in the original\r\n            condition: data.current.condition.text,\r\n            date: new Date(),\r\n            humidity: data.current.humidity,\r\n            wind: data.current.wind_mph,\r\n            precipitation: data.current.precip_in,\r\n            pressure: data.current.pressure_mb\r\n          },\r\n          location: {\r\n            name: data.location.name,\r\n            region: data.location.region,\r\n            country: data.location.country\r\n          }\r\n        };\r\n      } catch (error) {\r\n        console.error('Error fetching weather:', error);\r\n        throw new Error('Failed to fetch weather data');\r\n      }\r\n    };\r\n  \r\n    return {\r\n      fetchWeather\r\n    };\r\n  };"],"version":3}