{"file":"useLocation.mjs","mappings":"AAMS,MAAM,cAAc,MAAM;AAC/B,QAAM,cAAc,MAAoC;AACtD,WAAO,IAAI,QAA6B,CAAC,SAAS,WAAW;AACvD,UAAA,UAAW,aAAa;AACnB,eAAA,IAAI,MAAM,8CAA8C,CAAC;AAChE;AAAA,MAAA;AAGF,MAAA,SAAU,YAAY;AAAA,QACpB,CAAC,aAAkC;AACjC,gBAAM,SAAS;AAAA,YACb,UAAU,SAAS,OAAO;AAAA,YAC1B,WAAW,SAAS,OAAO;AAAA,UAC7B;AAGA,gBAAM,+DAA+D,OAAO,QAAQ,QAAQ,OAAO,SAAS,EAAE,EAC3G,KAAK,cAAY,SAAS,KAAA,CAAM,EAChC,KAAK,CAAQ,SAAA;AACd,kBAAM,WAAW,KAAK,QAAQ,QACzB,KAAK,QAAQ,QACb,KAAK,QAAQ,WACb,KAAK,QAAQ,gBACb,KAAK,QAAQ,UACb;AACL,kBAAM,YAAY,KAAK,QAAQ,SAC1B,KAAK,QAAQ,YACb;AACG,oBAAA;AAAA,cACR,GAAG;AAAA,cACH,MAAM,GAAG,QAAQ,KAAK,SAAS;AAAA,YAAA,CAC9B;AAAA,UAAA,CACA,EACA,MAAM,MAAM;AAEb,oBAAQ,MAAM;AAAA,UAAA,CACb;AAAA,QACH;AAAA,QACA,CAAC,UAAoC;AACjC,cAAA;AACJ,kBAAQ,MAAM,MAAM;AAAA,YAClB,KAAK,MAAM;AACM,6BAAA;AACf;AAAA,YACF,KAAK,MAAM;AACM,6BAAA;AACf;AAAA,YACF,KAAK,MAAM;AACM,6BAAA;AACf;AAAA,YACF;AACiB,6BAAA;AAAA,UAAA;AAEZ,iBAAA,IAAI,MAAM,YAAY,CAAC;AAAA,QAAA;AAAA,MAElC;AAAA,IAAA,CACD;AAAA,EACH;AAEO,SAAA;AAAA,IACL;AAAA,EACF;AACF;","names":[],"sources":["../../../../composables/useLocation.ts"],"sourcesContent":["interface LocationCoordinates {\r\n    latitude: number;\r\n    longitude: number;\r\n    city?: string;\r\n  }\r\n\r\n  export const useLocation = () => {\r\n    const getLocation = (): Promise<LocationCoordinates> => {\r\n      return new Promise<LocationCoordinates>((resolve, reject) => {\r\n        if (!navigator.geolocation) {\r\n          reject(new Error('Geolocation is not supported by your browser'));\r\n          return;\r\n        }\r\n  \r\n        navigator.geolocation.getCurrentPosition(\r\n          (position: GeolocationPosition) => {\r\n            const coords = {\r\n              latitude: position.coords.latitude,\r\n              longitude: position.coords.longitude\r\n            };\r\n            \r\n            // Reverse geocoding to get city and state names\r\n            fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${coords.latitude}&lon=${coords.longitude}`)\r\n              .then(response => response.json())\r\n              .then(data => {\r\n              const cityName = data.address.city || \r\n                   data.address.town || \r\n                   data.address.village ||\r\n                   data.address.municipality ||\r\n                   data.address.county ||\r\n                   'Unknown';\r\n              const stateName = data.address.state ||\r\n                   data.address.province ||\r\n                   'Unknown';\r\n              resolve({\r\n              ...coords,\r\n              city: `${cityName}, ${stateName}`\r\n              });\r\n              })\r\n              .catch(() => {\r\n              // If geocoding fails, resolve with coordinates only\r\n              resolve(coords);\r\n              });\r\n            },\r\n            (error: GeolocationPositionError) => {\r\n            let errorMessage: string;\r\n            switch (error.code) {\r\n              case error.PERMISSION_DENIED:\r\n                errorMessage = 'Location access is required to fetch weather data';\r\n                break;\r\n              case error.POSITION_UNAVAILABLE:\r\n                errorMessage = 'Location information is unavailable';\r\n                break;\r\n              case error.TIMEOUT:\r\n                errorMessage = 'Request to get location timed out';\r\n                break;\r\n              default:\r\n                errorMessage = 'An unknown error occurred';\r\n            }\r\n            reject(new Error(errorMessage));\r\n          }\r\n        );\r\n      });\r\n    };\r\n  \r\n    return {\r\n      getLocation\r\n    };\r\n  };\r\n\r\n  "],"version":3}